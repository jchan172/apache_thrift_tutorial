#!/usr/bin/env python

import sys
sys.path.append('../gen-py')

from addressbook import AddressBook
from addressbook.ttypes import *

# Import the Thrift stack
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

class AddressbookHandler:
  def __init__(self):
    self.log = {}

  ''' serialize:

 	Arguments:

 		msg: Thrift object you want to serialize

 	Output:

 		serialized_string: serialized string version of the input

  '''
  def serialize(self, msg):
  	# Create a memory buffer.
  	transportOut = TTransport.TMemoryBuffer()
  	# Wrap the memory buffer in binary protocol.
  	protocolOut = TBinaryProtocol.TBinaryProtocol(transportOut)
  	# Call the write method of the input (input Thrift object has .write method generated by Thrift compiler (see 'ttypes.py'))
  	msg.write(protocolOut)
  	serialized_string = transportOut.getvalue()
  	return serialized_string

  ''' deserialize:

  Arguments:

  	msg: empty version Thrift object you want to get back
  	data: the string you want to deserialize

  Output:

  	msg: populated Thrift object
	
  '''
  def deserialize(self, msg, data):
  	# Create a memory buffer from input
    transport_in = TTransport.TMemoryBuffer(data)
    protocol_in = TBinaryProtocol.TBinaryProtocol(transport_in)
    msg.read(protocol_in)
    return msg

  def listAll(self, contacts_list):
  	contacts = ContactsList()
  	contacts.list_of_people = []
  	contacts = self.deserialize(ContactsList(), contacts_list)

  	returnString = ""
  	for contact in contacts.list_of_people:
  		returnString += "Name: " + contact.name + '\n'
  	# print "ID: ", contacts.id
  	# for person in contacts:
  	# 	print "Name: ", person.name
  	# 	print "ID: ", person.id
  	# 	for phone_number in person.number:
  	# 		print "Number: ", phone_number.number
  	returnString += "Done listing.\n"
  	return returnString

  def saveContacts(self, contacts_list, filename):
  	serialized_string = self.serialize(contacts_list)
  	f = open(filename, "wb")
  	f.write(serialized_string)
  	f.close()
  	return serialized_string

handler = AddressbookHandler()
processor = AddressBook.Processor(handler)
transport = TSocket.TServerSocket(port=9090)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

# You could do one of these for a multithreaded server
#server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
#server = TServer.TThreadPoolServer(processor, transport, tfactory, pfactory)

print 'Starting the Address Book server...'
server.serve()
print 'done.'
